using Avalonia;
using Avalonia.Interactivity;
using Avalonia.Controls;
using Avalonia.Markup.Xaml;
using Kotin_Curs.Models;
using Microsoft.EntityFrameworkCore;
using CursWork.ViewModels;
using CursWork.ViewModels.StaticTableCreateRowViewModels;
using CursWork.Views.StaticTableCreateRowViews;
using CursWork.Database;

namespace CursWork.Views
{
    public partial class FirstView : UserControl
    {
        public FirstView()
        {
            InitializeComponent();
        }

        private void InitializeComponent()
        {
            AvaloniaXamlLoader.Load(this);
        }

        private void changeDataGridItems()
        {
            object? selectedTab;
            selectedTab = this.FindControl<TabControl>("DataTabs").SelectedItem;
            if (selectedTab != null)
            {
                if (selectedTab is DynTab)
                {
                    var selectedItems = (selectedTab as DynTab).BindedList;
                    if (selectedItems != null)
                        this.Find<DataGrid>("DataTable").Items = selectedItems;
                }
                else
                {
                    if (selectedTab is HorseTab)
                    {
                        var selectedItems = (selectedTab as BidTab).DBS;
                        if (selectedItems != null)
                            this.Find<DataGrid>("DataTable").Items = selectedItems;
                    }
                    else if (selectedTab is BidderTab)
                    {
                        var selectedItems = (selectedTab as BidderTab).DBS;
                        if (selectedItems != null)
                            this.Find<DataGrid>("DataTable").Items = selectedItems;
                    }
                    else if (selectedTab is DogStatisticTab)
                    {
                        var selectedItems = (selectedTab as DogStatisticTab).DBS;
                        if (selectedItems != null)
                            this.Find<DataGrid>("DataTable").Items = selectedItems;
                    }
                    else if (selectedTab is DogTab)
                    {
                        var selectedItems = (selectedTab as DogTab).DBS;
                        if (selectedItems != null)
                            this.Find<DataGrid>("DataTable").Items = selectedItems;
                    }
                    else if (selectedTab is ParticipantTab)
                    {
                        var selectedItems = (selectedTab as ParticipantTab).DBS;
                        if (selectedItems != null)
                            this.Find<DataGrid>("DataTable").Items = selectedItems;
                    }
                    else if (selectedTab is RaceTab)
                    {
                        var selectedItems = (selectedTab as RaceTab).DBS;
                        if (selectedItems != null)
                            this.Find<DataGrid>("DataTable").Items = selectedItems;
                    }
                    else if (selectedTab is TrackTab)
                    {
                        var selectedItems = (selectedTab as TrackTab).DBS;
                        if (selectedItems != null)
                            this.Find<DataGrid>("DataTable").Items = selectedItems;
                    }
                    else if (selectedTab is TrainerStatisticTab)
                    {
                        var selectedItems = (selectedTab as TrainerStatisticTab).DBS;
                        if (selectedItems != null)
                            this.Find<DataGrid>("DataTable").Items = selectedItems;
                    }
                    else if (selectedTab is TrainerTab)
                    {
                        var selectedItems = (selectedTab as TrainerTab).DBS;
                        if (selectedItems != null)
                            this.Find<DataGrid>("DataTable").Items = selectedItems;
                    }
                    else if (selectedTab is TrapTab)
                    {
                        var selectedItems = (selectedTab as TrapTab).DBS;
                        if (selectedItems != null)
                            this.Find<DataGrid>("DataTable").Items = selectedItems;
                    }
                    else throw new System.ArgumentException();
                }
            }
        }


    }
}